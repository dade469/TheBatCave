// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheBatCoreWebScrapper.DAL;

namespace TheBatCoreWebScrapper.DAL.Migrations
{
    [DbContext(typeof(ScrapperContext))]
    partial class ScrapperContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TheBatCoreWebScrapper.DAL.Models.ScrappingConfiguration", b =>
                {
                    b.Property<int>("ScrappingConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Interval")
                        .HasColumnType("int");

                    b.Property<bool>("ScrappingEnabled")
                        .HasColumnType("bit");

                    b.Property<int?>("UrlLibraryId")
                        .HasColumnType("int");

                    b.HasKey("ScrappingConfigurationId");

                    b.HasIndex("UrlLibraryId");

                    b.ToTable("ScrappingConfigurations");
                });

            modelBuilder.Entity("TheBatCoreWebScrapper.DAL.Models.ScrappingResult", b =>
                {
                    b.Property<int>("ScrappingResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyResult")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BodyUnchanged")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasChanged")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScrappingConfigurationId")
                        .HasColumnType("int");

                    b.HasKey("ScrappingResultId");

                    b.HasIndex("ScrappingConfigurationId")
                        .IsUnique();

                    b.ToTable("ScrappingResults");
                });

            modelBuilder.Entity("TheBatCoreWebScrapper.DAL.Models.UrlLibrary", b =>
                {
                    b.Property<int>("UrlLibraryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UrlLibraryId");

                    b.ToTable("UrlLibraries");
                });

            modelBuilder.Entity("TheBatCoreWebScrapper.DAL.Models.ScrappingConfiguration", b =>
                {
                    b.HasOne("TheBatCoreWebScrapper.DAL.Models.UrlLibrary", "UrlLibrary")
                        .WithMany()
                        .HasForeignKey("UrlLibraryId");
                });

            modelBuilder.Entity("TheBatCoreWebScrapper.DAL.Models.ScrappingResult", b =>
                {
                    b.HasOne("TheBatCoreWebScrapper.DAL.Models.ScrappingConfiguration", "Configuration")
                        .WithOne("ScrappingResult")
                        .HasForeignKey("TheBatCoreWebScrapper.DAL.Models.ScrappingResult", "ScrappingConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
